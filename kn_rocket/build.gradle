apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlin-android-extensions'

apply from: new File(projectDir.parentFile, 'android_lib.gradle')

//apply plugin: 'kotlin-native-cocoapods'
import org.jetbrains.kotlin.gradle.tasks.FatFrameworkTask

def frameworkName = "kn_rocket"
def frameworkObjCPrefix = 'KN' // rocket

def configureFramework(framework) {
    configure(framework) {
        isStatic = true
        transitiveExport = true
    }
}

def iosTargets

kotlin {

    targets {

        fromPreset(presets.android, 'android')
        iosX64("ios")
        iosTargets = [ios]

        println("rocket: iosTargets:" + iosTargets)

        configure(iosTargets) {
            binaries.framework { frame ->
                baseName = frameworkName
                configureFramework(frame)
            }

            binaries {
                def defaultDebugFramework = findFramework('', DEBUG)
                if(defaultDebugFramework != null) {
                    configureFramework(defaultDebugFramework)
                }

                def defaultReleaseFramework = findFramework('', RELEASE)
                if(defaultReleaseFramework != null) {
                    configureFramework(defaultReleaseFramework)
                }
            }

            compilations.main {
                extraOpts '-Xobjc-generics'
                extraOpts '-module-name', frameworkObjCPrefix
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            }
        }

        androidMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            }
        }

        iosMain {
            dependencies {
            }
        }
    }

//    cocoapods {
//        // Configure fields required by CocoaPods.
//        summary = "Some description for a Kotlin/Native module dif2"
//        homepage = "Link to a Kotlin/Native module homepage dif2"
//    }


    task iosFatFramework(type: FatFrameworkTask) {
        // The fat framework must have the same base name as the initial frameworks.
        baseName = frameworkName

        String frameworkType = "DEBUG"
        println("iosFatFrameworkType: $frameworkType")

        // The default destination directory is '<build directory>/fat-framework'.
        destinationDir = file("$buildDir/cocoapods/framework")

        def frameworkList = new ArrayList()
        iosTargets.forEach { oneTarget ->
            frameworkList.add(oneTarget.binaries.getFramework(frameworkType))
        }

        from(frameworkList)
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}
