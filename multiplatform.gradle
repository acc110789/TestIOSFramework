File file = new File(projectDir.parentFile, 'android_lib.gradle')
if(file.exists()) {
    apply from: new File(projectDir.parentFile, 'android_lib.gradle')
    apply from: new File(projectDir.parentFile, 'upload.gradle')
    apply from: new File(projectDir.parentFile, 'kn_ext.gradle')
} else {
    //暂时支持二级子目录查找，后续按需添加多级目录支持
    apply from: new File(projectDir.parentFile.parentFile, 'android_lib.gradle')
    apply from: new File(projectDir.parentFile.parentFile, 'upload.gradle')
    apply from: new File(projectDir.parentFile.parentFile, 'kn_ext.gradle')
}
apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlin-android-extensions'


Properties localProperties = new Properties()
File localPropertiesFile = new File("${rootDir}/local.properties")

ext.iosUseDebugFramework=false
String local_pod_root = ""

if (localPropertiesFile.exists()) {
    localProperties.load(localPropertiesFile.newDataInputStream())
    String podRoot = localProperties.getProperty("local_pod_root")
    if(podRoot == null) {
        podRoot = localProperties.getProperty("ios.podsDir")
    }
    if(podRoot == null) podRoot = ""
    local_pod_root = podRoot

    String useDebugFramework = localProperties.getProperty("ios.useDebugFramework")
    ext.iosUseDebugFramework = useDebugFramework == "true"
}

ext.podsRoot = "${System.getenv("PODS_ROOT") ?: local_pod_root}"

def iosBuildMode = project.findProperty("kotlin.native.cocoapods.configuration")?.toUpperCase() ?: 'NONE'
ext.iosArchs = "${System.getenv("ARCHS")?.toLowerCase() ?: "arm64"}"
ext.isIOSDebugMode = iosBuildMode == 'DEBUG'
ext.isUndefinedMode = iosBuildMode == 'NONE'
ext.iosTargets = []

def isReleaseMode = iosBuildMode != 'DEBUG' && iosBuildMode != "NONE"

def kotlinTarget = project.findProperty("kotlin.native.cocoapods.target")

println("kotlin-target: " + kotlinTarget)
println("iosBuildMode: " + iosBuildMode)

kotlin {

    android {
        publishLibraryVariants("release", "debug")
    }

    targets {
        println("iosArchs: " + iosArchs)
        println("isIOSDebugMode: " + isIOSDebugMode)
        println("isUndefinedMode: " + isUndefinedMode)
        println("isReleaseMode: " + isReleaseMode)

        if (isIOSDebugMode) {
            def buildForTarget = project.findProperty("kotlin.native.cocoapods.target")
            if (buildForTarget != "ios_arm") {
                iosX64("ios")
                iosTargets = [ios]
            } else {
                if (iosArchs.contains("armv7")) {
                    iosArm32()
                    iosArm64("ios")
                    iosTargets = [ios, iosArm32]
                } else {
                    iosArm64("ios")
                    iosTargets = [ios]
                }
            }
        }

        if(isReleaseMode) {
            iosArm32("ios")
            iosX64("iosX64")
            iosArm64("iosArm64")
            iosTargets = [ios , iosX64 , iosArm64]
        }


        if(isUndefinedMode) {
            iosArm64("ios")
            iosTargets = [ios]
        }

        fromPreset(presets.android, 'android')
    }

    println("iosTargets: " + iosTargets)


    sourceSets {
        commonMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            }
        }

        androidMain {
            dependencies {
                api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            }
        }

        iosMain {
            dependencies {
            }
        }

        if(isUndefinedMode) {
            //只有一个架构，不用额外配置依赖
        }

        if(isReleaseMode) {
            iosX64Main.dependsOn(iosMain)
            iosArm64Main.dependsOn(iosMain)
        }

        if(isIOSDebugMode) {
            iosArm32Main.dependsOn(iosMain)
        }
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}
